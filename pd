#! /bin/bash
#
# pd --- user script to send data to pdplot daemon
#
usage="usage:  pd [-k][-n][-p][-d N] [-w window_name] [file...]"
gopts='c:knp:rd:f:w:g:h:s:a:'
#
#   -n	      don't clear the existing data
#   -k	      kill the pdplot daemon, remove the pipe
#   -a <file> dump plot to <file>.ap
#   -h <file> dump plot to <file>.hpgl
#   -g <file> dump plot to <file>.png
#   -p <file> dump the plot to <file>.ps
#   -f <file> dump the plot to <file>.dxf
#   -s <file> dump the plot to <file>.svg
#   -c <file> dump the plot to <file>.d (piglet cell)
#   -r	      refresh the window
#   -d N      debug level N (default 0)
#   -w name   specify the name of the window

wd=`pwd`
clear="clear"
kill=0
cmd=""
debug=""
given_name=""

set -f
set -- `getopt "$gopts" "$@"`; ret=$?
set +f
if [ $ret != 0 ] ; then
    echo "$usage" 1>&2; exit 2
fi
while [ $# -gt 0 ] ; do
    case $1 in
	-n )	clear=""; shift ;;
	-r )	cmd="plot"; shift ;;
	-k )	kill=1; shift ;;
	-d )	debug="-d $2"; shift 2 ;;
	-a )    cmd="autoplot $wd/$2"; shift 2 ;;
	-c )    cmd="pig $wd/$2"; shift 2 ;;
	-p )    cmd="post $wd/$2"; shift 2 ;;
	-f )    cmd="dxf $wd/$2"; shift 2 ;;
	-s )    cmd="svg $wd/$2"; shift 2 ;;
	-g )    cmd="graph $wd/$2"; shift 2 ;;
	-h )    cmd="hpgl $wd/$2"; shift 2 ;;
	-w )	given_name=$2; shift 2 ;;
	-- )	shift; break ;;
	#### These cases should never be executed:
	-* )	echo "$0: script error: option '$1' not handled" 1>&2; exit 2;;
	* )	echo "$0: getopts error parsing option '$1'" 1>&2; exit 2;;
    esac
done

# echo $cmd

# Now only filenames are left:
files=$*

pdplot=pdplot

if [ -z "$given_name" ] ; then given_name=$(basename $0) ; fi

displayhost=${DISPLAY%%[.:]*}
if [ "$displayhost" = `hostname` ] ; then
    window="$given_name"
else
    window="`hostname`.$given_name"
fi

pipedir=/var/spool/sockets/pdplot
pipe=$pipedir/$window.$DISPLAY
function psgrep
{
    ps -ef | sed '/grep/d' | grep "$pdplot *$displayarg"
}

if [ "$DISPLAY" = "" ] ; then	
    echo 'pd: $DISPLAY is not set' 1>&2
    exit 2
elif [ "$DISPLAY" = `hostname`:0.0 ] ; then
    displayarg=""
else
    displayarg="-D $DISPLAY"
fi
if [ ! -d $pipedir ] ; then
    echo "pd: creating $pipedir" 1>&2
    mkdir $pipedir
    chmod 777 $pipedir
fi
if [ $kill = 1 ] ; then
    if [ ! -p $pipe ] ; then
	rm -f $pipe
    fi
    psgrep | awk '{print "kill " $2}' | sh
    ps=`psgrep`
    if [ "$ps" != "" ] ; then
	echo "Process still alive:\n$ps"
    fi
    exit 0
fi
if [ ! -p $pipe ] ; then
    echo "pd: creating $pipe" 1>&2
    \rm -f $pipe
    /usr/bin/mkfifo -m 666 $pipe 2>/dev/null
fi

if psgrep >/dev/null ; then
    true    # already running
else
    echo "pd: starting pd daemon" 1>&2
    #$pdplot $displayarg -X $window $debug <$pipe & 
    #$pdplot <$pipe & 
    $pdplot $displayarg <$pipe &
fi

if [ "$cmd" != "" ] ; then
    echo "$cmd" >$pipe
else
    {
    echo "$clear"
    cat $files
    echo "" # the file might not have a newline...
    echo "plot"
    } >$pipe
fi

